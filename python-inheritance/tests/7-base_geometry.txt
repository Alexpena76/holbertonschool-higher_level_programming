>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# Test valid integers
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("height", 1)

# Test with string
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
...
TypeError: name must be an integer

# Test with zero
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

# Test with negative number
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0

# Test with float
>>> bg.integer_validator("average", 3.14)
Traceback (most recent call last):
...
TypeError: average must be an integer

# Test with boolean (True is technically an int subclass, but type() will catch it)
>>> bg.integer_validator("flag", True)
Traceback (most recent call last):
...
TypeError: flag must be an integer

# Test with None
>>> bg.integer_validator("value", None)
Traceback (most recent call last):
...
TypeError: value must be an integer

# Test with list
>>> bg.integer_validator("numbers", [1, 2, 3])
Traceback (most recent call last):
...
TypeError: numbers must be an integer

# Test with tuple
>>> bg.integer_validator("coords", (1, 2))
Traceback (most recent call last):
...
TypeError: coords must be an integer

# Test with dict
>>> bg.integer_validator("data", {"key": "value"})
Traceback (most recent call last):
...
TypeError: data must be an integer

# Test area() method
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

# Test with no arguments
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

# Test with one argument
>>> bg.integer_validator("test")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

# Test with very large positive integer
>>> bg.integer_validator("big", 999999999999)

# Test with negative one
>>> bg.integer_validator("neg", -1)
Traceback (most recent call last):
...
ValueError: neg must be greater than 0

# Test module docstring
>>> module_doc = __import__('7-base_geometry').__doc__
>>> len(module_doc) > 1
True

# Test class docstring
>>> class_doc = __import__('7-base_geometry').BaseGeometry.__doc__
>>> len(class_doc) > 1
True

# Test area method docstring
>>> area_doc = __import__('7-base_geometry').BaseGeometry.area.__doc__
>>> len(area_doc) > 1
True

# Test integer_validator method docstring
>>> validator_doc = __import__('7-base_geometry').BaseGeometry.integer_validator.__doc__
>>> len(validator_doc) > 1
True